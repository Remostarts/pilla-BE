// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {  
  id                           String          @id @default(uuid())
  email                        String          @unique
  phone                        String?         @unique
  role                         String          @default("user")
  customerType                 CustomerType    
  password                     String?         
  firstName                    String          
  middleName                   String          
  lastName                     String          
  profileImage                 String?         
  isVerified                   Boolean         @default(false)
  createdAt                    DateTime        @default(now())
  updatedAt                    DateTime        @updatedAt
  profile                      Profile?        
  emailVerificationCode        String?
  emailVerificationExpiresAt   DateTime?
  phoneVerificationCode        String?
  phoneVerificationExpiresAt   DateTime?
  refreshToken                 String[] 
  bankVerification             BankVerification?
  identityVerification         IdentityVerification?
  proofOfAddress               ProofOfAddress?
  nextOfKin                    NextOfKin?
}

model Profile {
  id                String          @id @default(uuid())
  road              String?       
  house             String?       
  city              String?       
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            String          @unique
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GettingStartedUser {
  id                           String          @id @unique @default(uuid())
  email                        String          @unique
  phone                        String?         @unique
  firstName                    String
  lastName                     String
  middleName                   String
  emailVerificationCode        String?
  emailVerificationExpiresAt   DateTime?
  phoneVerificationCode        String?
  phoneVerificationExpiresAt   DateTime?
}

model BankVerification {
  id                  String           @id @default(uuid())
  bvn                 String           @unique
  gender              String         
  dateOfBirth         String         
  isVerified          Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  userId              String           @unique
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IdentityVerification {
  id                String                    @id @default(uuid())
  documentType      IdVerificationDocType   
  idNumber          String                    @unique
  image             String                    
  isVerified        Boolean                   @default(false)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt

  userId            String                    @unique
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProofOfAddress {
  id                String                @id @default(uuid())
  address           String              
  state             String              
  localGovernment   String              
  city              String              
  documentType      AddressProofDocType     
  image             String
  isVerified        Boolean               @default(false)              
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  userId            String                @unique
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NextOfKin {
  id              String          @id @default(uuid())
  firstName       String        
  lastName        String        
  gender          String        
  relationship    String        
  phone           String        
  email           String        
  address         String    
  isVerified      Boolean         @default(false)    
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  userId          String          @unique     
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id                  String          @id @default(uuid())
  name                String
  email               String          
  message             String
  createdAt           DateTime        @default(now())
}

enum CustomerType {
  personal
  business
}

enum AddressProofDocType {
  electricity_bill
  water_bill
  waste_bil
  cable_bill
}

enum IdVerificationDocType {
  voter_id
  driver_license
  international_passport
}