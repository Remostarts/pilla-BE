paths:
    /auth/create-partial-user:
        post:
            tags: [Auth]
            summary: Create a partial user
            description: Creates a new partial user for getting started with the registration process.
            requestBody:
                description: Partial user details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PartialUserRequest'
            responses:
                '201':
                    description: Partial user created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PartialUserResponse'
                '409':
                    $ref: '#/components/responses/Conflict'
                '500':
                    $ref: '#/components/responses/InternalServerError'

    /auth/register:
        post:
            tags: [Auth]
            summary: Register a new user
            description: Completes the registration process by creating a new user.
            requestBody:
                description: User registration details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserRegisterRequest'
            responses:
                '201':
                    description: User created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserRegisterResponse'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '409':
                    $ref: '#/components/responses/Conflict'
                '500':
                    $ref: '#/components/responses/InternalServerError'

    /auth/login:
        post:
            tags: [Auth]
            summary: Login user
            description: Authenticates a user and returns access and refresh tokens.
            requestBody:
                description: User login credentials
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UserLoginRequest'
            responses:
                '200':
                    description: User logged in successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserLoginResponse'
                    headers:
                        Set-Cookie:
                            description: Set Refresh Token Cookie
                            schema:
                                type: string
                                format: jwt
                                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzgxOTUyMDB9.uDzM3vZf43gCkUz_0
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '500':
                    $ref: '#/components/responses/InternalServerError'

    /auth/forget-password:
        post:
            tags: [Auth]
            summary: Reset user password
            description: Resets the user's password using the provided current and new passwords.
            requestBody:
                description: Password reset details
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ForgetPasswordRequest'
            responses:
                '200':
                    description: Password reset successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponse'
                '401':
                    $ref: '#/components/responses/Unauthorized'
                '404':
                    $ref: '#/components/responses/NotFound'
                '409':
                    $ref: '#/components/responses/Conflict'
                '500':
                    $ref: '#/components/responses/InternalServerError'

components:
    schemas:
        PartialUserRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@mail.com
                firstName:
                    type: string
                    example: John
                middleName:
                    type: string
                    example: A
                lastName:
                    type: string
                    example: Doe
                phoneNumber:
                    type: string
                    example: '01712345678'
            required: [email, firstName, lastName, phoneNumber]

        PartialUserResponse:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    example: 123e4567-e89b-12d3-a456-426614174000
                email:
                    type: string
                    format: email
                    example: user@mail.com
                firstName:
                    type: string
                    example: John
                lastName:
                    type: string
                    example: Doe
                emailVerificationCode:
                    type: string
                    example: '123456'
                emailVerificationExpiresAt:
                    type: string
                    format: date-time
                    example: 2024-08-01T12:00:00Z

        UserRegisterRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@mail.com
                password:
                    type: string
                    format: password
                    example: PassWord123
                confirmPassword:
                    type: string
                    format: password
                    example: PassWord123
                emailVerificationCode:
                    type: string
                    example: '123456'
                customerType:
                    type: string,
                    enum: ['business', 'personal']
            required: [email, password, confirmPassword, emailVerificationCode, customerType]

        UserRegisterResponse:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    example: 5f9b3b3b9b0b7c0017e2b3a5
                role:
                    type: string
                    example: user
                isVerified:
                    type: boolean
                    example: true

        UserLoginRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: user@mail.com
                password:
                    type: string
                    format: password
                    example: PassWord123
            required: [email, password]

        UserLoginResponse:
            type: object
            properties:
                accessToken:
                    type: string
                    format: jwt
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzgxOTUyMDB9.uDzM3vZf43gCkUz_0
                refreshToken:
                    type: string
                    format: jwt
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MzgxOTUyMDB9.uDzM3vZf43gCkUz_0
                role:
                    type: string
                    example: user

        ForgetPasswordRequest:
            type: object
            properties:
                newPassword:
                    type: string
                    format: password
                    example: newPassWord123
                confirmNewPassword:
                    type: string
                    format: password
                    example: newPassWord123
            required: [newPassword, confirmNewPassword]

        UserResponse:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    example: 5f9b3b3b9b0b7c0017e2b3a5
                email:
                    type: string
                    format: email
                    example: user@mail.com
                firstName:
                    type: string
                    example: John
                lastName:
                    type: string
                    example: Doe

    responses:
        Conflict:
            description: Conflict error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Conflict error occurred'

        Unauthorized:
            description: Unauthorized error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Unauthorized error occurred'

        NotFound:
            description: Not found error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Resource not found'

        InternalServerError:
            description: Internal server error
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            message:
                                type: string
                                example: 'Internal server error occurred'
