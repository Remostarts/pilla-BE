openapi: 3.0.0
info:
    title: User API
    version: 1.0.0

paths:
    /user/verify-bvn:
        post:
            summary: Verify BVN (Bank Verification Number)
            tags: [User]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BvnVerificationInput'
            responses:
                '200':
                    description: BVN verification successful
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BankVerification'
                '404':
                    description: User not found
                '409':
                    description: Conflict - All fields are required
                '500':
                    description: Internal server error

    /user/verify-id:
        post:
            summary: Verify Identity
            tags: [User]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IdVerificationInput'
            responses:
                '200':
                    description: ID verification successful
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityVerification'
                '404':
                    description: User not found
                '409':
                    description: Conflict - All fields are required
                '500':
                    description: Internal server error

    /user/verify-address:
        post:
            summary: Verify Address
            tags: [User]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ProofOfAddressInput'
            responses:
                '200':
                    description: Address verification successful
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProofOfAddress'
                '404':
                    description: User not found
                '409':
                    description: Conflict - All fields are required
                '500':
                    description: Internal server error

    /user/add-next-of-kin:
        post:
            summary: Add Next of Kin
            tags: [User]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/NextOfKinInput'
            responses:
                '200':
                    description: Next of Kin added successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/NextOfKin'
                '404':
                    description: User not found
                '409':
                    description: Conflict - All fields are required
                '500':
                    description: Internal server error

    /user/add-card:
        post:
            summary: Add a new card for the user
            tags: [User]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AddCardInput'
            responses:
                '201':
                    description: Card added successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Card'
                '404':
                    description: User not found
                '500':
                    description: Internal server error

    /user/add-money/{cardId}:
        post:
            summary: Add money using a stored card
            tags: [User]
            parameters:
                - in: path
                  name: cardId
                  required: true
                  schema:
                      type: string
                  description: The ID of the card to be used
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AddMoneyInput'
            responses:
                '200':
                    description: Money added successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Transaction'
                '404':
                    description: Card or User not found
                '500':
                    description: Internal server error
      /user/get-verification-status:
    get:
      summary: Retrieve user verification status
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerificationStatusResponse'
        '404':
          description: User not found
        '500':
          description: Internal server error

  /user/set-transaction-pin:
    post:
      summary: Set transaction PIN for user
      tags: [User]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetTransactionPinInput'
      responses:
        '200':
          description: PIN set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pin set successfully
        '404':
          description: User not found
        '409':
          description: Conflict - PIN and Confirm PIN must be the same
        '500':
          description: Internal server error

components:
    VerificationStatusResponse:
      type: object
      properties:
        userVerification:
          type: boolean
          example: true
        bankVerification:
          type: boolean
          example: true
        identityVerification:
          type: boolean
          example: true
        proofOfAddress:
          type: boolean
          example: false
        nextOfKin:
          type: boolean
          example: true
        transactionPin:
          type: boolean
          example: true

    SetTransactionPinInput:
      type: object
      properties:
        pin:
          type: string
          example: '1234'
        confirmPin:
          type: string
          example: '1234'
      required:
        - pin
        - confirmPin
    schemas:
        BvnVerificationInput:
            type: object
            properties:
                bvn:
                    type: string
                    example: '12345678901'
                gender:
                    type: string
                    enum: ['male', 'female']
                    example: 'male'
                dateOfBirth:
                    type: string
                    format: date
                    example: '1990-01-01'
            required:
                - bvn
                - gender
                - dateOfBirth

        IdVerificationInput:
            type: object
            properties:
                documentType:
                    type: string
                    enum: ['international_passport', 'driver_license', 'voter_id']
                    example: 'driver_license'
                idNumber:
                    type: string
                    example: 'A1234567'
                image:
                    type: string
            required:
                - documentType
                - idNumber
                - image

        ProofOfAddressInput:
            type: object
            properties:
                address:
                    type: string
                    example: '123 Main St'
                state:
                    type: string
                    example: 'Lagos'
                localGovernment:
                    type: string
                    example: 'Ikeja'
                city:
                    type: string
                    example: 'Lagos'
                documentType:
                    type: string
                    enum: ['electricity_bill', 'water_bill', 'waste_bil', 'cable_bill']
                    example: 'electricity_bill'
                image:
                    type: string
            required:
                - address
                - state
                - localGovernment
                - city
                - documentType
                - image

        NextOfKinInput:
            type: object
            properties:
                firstName:
                    type: string
                    example: 'John'
                lastName:
                    type: string
                    example: 'Doe'
                gender:
                    type: string
                    enum: ['male', 'female']
                    example: 'male'
                relationship:
                    type: string
                    example: 'brother'
                phone:
                    type: string
                    example: '+2348012345678'
                email:
                    type: string
                    example: 'john.doe@example.com'
                address:
                    type: string
                    example: '123 Main St, Lagos'
            required:
                - firstName
                - lastName
                - gender
                - relationship
                - phone
                - email
                - address

        BankVerification:
            type: object
            properties:
                id:
                    type: string
                    example: 'vb5352c-cc414c-1cdcd55'
                bvn:
                    type: string
                    example: '12345678901'
                gender:
                    type: string
                    enum: ['male', 'female']
                    example: 'male'
                dateOfBirth:
                    type: string
                    format: date
                    example: '1990-01-01'
                isVerified:
                    type: boolean
                    example: true
                userId:
                    type: string
                    example: 'vb5352c-cc414c-1cdcd55'

        IdentityVerification:
            type: object
            properties:
                id:
                    type: string
                    example: 'vb5352c-cc414c-1cdcd55'
                documentType:
                    type: string
                    enum: ['international_passport', 'driver_license', 'voter_id']
                    example: 'passport'
                idNumber:
                    type: string
                    example: 'A1234567'
                image:
                    type: string
                    format: binary
                isVerified:
                    type: boolean
                    example: true
                userId:
                    type: string
                    example: 'vb5352c-cc414c-1cdcd55'

        ProofOfAddress:
            type: object
            properties:
                id:
                    type: string
                    example: 'vb5352c-cc414c-1cdcd55'
                address:
                    type: string
                    example: '123 Main St'
                state:
                    type: string
                    example: 'Lagos'
                localGovernment:
                    type: string
                    example: 'Ikeja'
                city:
                    type: string
                    example: 'Lagos'
                documentType:
                    type: string
                    enum: ['electricity_bill', 'water_bill', 'waste_bil', 'cable_bill']
                    example: 'electricity_bill'
                image:
                    type: string
                    format: binary
                isVerified:
                    type: boolean
                    example: true
                userId:
                    type: string
                    example: 'vb5352c-cc414c-1cdcd55'

        NextOfKin:
            type: object
            properties:
                id:
                    type: string
                    example: 'vb5352c-cc414c-1cdcd55'
                firstName:
                    type: string
                    example: 'John'
                lastName:
                    type: string
                    example: 'Doe'
                gender:
                    type: string
                    enum: ['male', 'female']
                    example: 'male'
                relationship:
                    type: string
                    example: 'brother'
                phone:
                    type: string
                    example: '+2348012345678'
                email:
                    type: string
                    example: 'john.doe@example.com'
                address:
                    type: string
                    example: '123 Main St, Lagos'
                isVerified:
                    type: boolean
                    example: true
                userId:
                    type: string
                    example: 'vb5352c-cc414c-1cdcd55'

        AddCardInput:
            type: object
            properties:
                cardNumber:
                    type: string
                    example: '4111111111111111'
                expiryDate:
                    type: string
                    example: '12/25'
                cardHolderName:
                    type: string
                    example: 'John Doe'
                cvv:
                    type: string
                    example: '123'
            required:
                - cardNumber
                - expiryDate
                - cardHolderName
                - cvv

        AddMoneyInput:
            type: object
            properties:
                amount:
                    type: number
                    example: 5000
            required:
                - amount

        Card:
            type: object
            properties:
                id:
                    type: string
                    example: 'card12345'
                cardNumber:
                    type: string
                    example: '4111111111111111'
                expiryDate:
                    type: string
                    example: '12/25'
                cardHolderName:
                    type: string
                    example: 'John Doe'
                userId:
                    type: string
                    example: 'user12345'

        Transaction:
            type: object
            properties:
                id:
                    type: string
                    example: 'trans12345'
                amount:
                    type: number
                    example: 5000
                userId:
                    type: string
                    example: 'user12345'
                transactionType:
                    type: string
                    example: 'Credit'
                status:
                    type: string
                    example: 'Success'
                accountName:
                    type: string
                    example: 'ABC'
                bankName:
                    type: string
                    example: 'ABC'
                bankAccount:
                    type: string
                    example: '1234'
                narration:
                    type: string
                    example: 'Card'
                sessionId:
                    type: string
                    example: '55526841025'
                transactionId:
                    type: string
                    example: '541241284541'
